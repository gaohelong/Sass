//【if】
// 当@if的表达式返回值不是false或者null时，条件成立，输出{}内的代码：
$width: 100;
p {
    @if 1 + 1 == 2 { border: 1px solid; }
    @if 5 < 3 { border: 2px dotted; }
    @if null  { border: 3px double; }
    @if $width > 1 { font-size: 18px; }
}

$type: red;
p {
    @if $type == red { background-color: red; }
    @else { background-color: white; }
}

$type: monster; 
p { 
    @if $type == ocean { color: blue; } 
    @else if $type == matador { color: red; } 
    @else if $type == monster { color: green; } 
    @else { color: black; } 
}

//【for】
// for指令可以在限制的范围内重复输出格式，每次按要求（变量的值）对输出结果做出变动。这个指令包含两种格式：@for $var from <start> through <end>，或者 @for $var from <start> to <end>，区别在于 through 与 to 的含义：当使用 through 时，条件范围包含 <start> 与 <end> 的值，而使用 to 时条件范围只包含 <start> 的值不包含 <end> 的值。另外，$var 可以是任何变量，比如 $i；<start> 和 <end> 必须是整数值。
@for $i from 1 through 3 {
    .item-#{$i} { width: 2em * $i; }
}

@for $i from 1 to 3 {
    .item-to-#{$i} { width: 2em * $i; }
}

//【each】
// @each 指令的格式是 $var in <list>, $var 可以是任何变量名，比如 $length 或者 $name，而 <list> 是一连串的值，也就是值列表。
// @each 将变量 $var 作用于值列表中的每一个项目，然后输出结果，例如：
@each $animal in puma, sea-slug, egret, salamander {
    .#{$animal}-icon {
        background-image: url('/images/#{$animal}.png');
    }
}

@each $animal, $color, $cursor in (puma, black, default), (sea-slug, blue, pointer), (egret, white, move) {
    .#{$animal}-icon { background-image: url('/images/#{$animal}.png');
        border: 2px solid $color;
        cursor: $cursor; 
    }
}

@each $header, $size in (h1: 2em, h2: 1.5em, h3: 1.2em) {
    #{$header} { font-size: $size; }
}

//【while】
// @while 指令重复输出格式直到表达式返回结果为 false。这样可以实现比 @for 更复杂的循环，只是很少会用到。例如：
$i: 6;
@while $i > 0 {
    .item-#{$i} { width: 2em * $i; }
    $i: $i - 2;
}
