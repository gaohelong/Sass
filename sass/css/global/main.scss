// 导入文件.
@import "colors/color";

// 定义全局变量赋值.
$nav-color: #F90;
$width-100: 100px;

// 导航.
.nav {
    width: $width-100;
    color: $nav-color;
    background-color: $color-red; // 使用导入文件中的变量.
}

// 自导航.
.sub-nav {
    $width-100: 150px; // 定义局部变量(只在当前块级作用域中生效).
    width: $width-100;
    color: $nav-color;
}

.sub-nav {
    padding: 10px $width-100 10px 15px;
    width: $width-100;
}

// 选中.
$highlight-color: #F90;
.selected {
    border: 1px solid $highlight-color;
}

// 【嵌套css规则】
#content {
    article {
        h1 { color: #333; }
        p { margin-bottom: 1.4em; }
    }
    aside { background-color: #eee; }
    .nav { font-size: 12px; }
}

// 【父选择器的标识符&】
article a {
    color: blue;
    &:hover { color: red; }
}

a {
    font-weight: bold;
    text-decoration: none;
    &:hover { text-decoration: underline; }
    body.firefox & { font-weight: normal; }
}

#content aside {
    color: red;
    #side & { color: green }
}

// 【群组选择器的嵌套】
.container {
    h1, h2, h3 { margin-bottom: .8em; }
}

nav, aside {
    a { color: blue; }
}

// 【子组合选择器和同层组合选择器：>、+和~】
article {
    ~ article { border-top: 1px dashed #ccc; }
    > section { background: #eee; }
    dl > {
        dt { color: #333; }
        dd { color: #555; }
    }
    nav + & { margin-top: 0; }
}

// 【嵌套属性】
nav {
    border: {
        style: solid;
        width: 1px;
        color: #ccc;
    }
}

nav {
    border: 1px solid #ccc {
        left: 0px;
        right: 0px;
    }
}

// 【静默注释】
// 静默注释的语法跟JavaScriptJava等类C的语言中单行注释的语法相同, 它们以//开头, 注释内容直到行末.静默注释不会出现在生成的.css文件中.

// 【混合器】
// 混合器使用@mixin标识符定义.看上去很像其他的CSS @标识符, 比如说@media或者@font-face.这个标识符给一大段样式赋予一个名字, 这样你就可以轻易地通过引用这个名字重用这段样式.
@mixin rounded-corners {
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    border-radius: 5px;
}

// 然后就可以在你的样式表中通过@include来使用这个混合器, 放在你希望的任何地方.@include调用会把混合器中的所有样式提取出来放在@include被调用的地方.
.notice {
    background-color: green;
    border: 2px solid #00aa00;
    @include rounded-corners;
}

// 【何时使用混合器】
// 利用混合器, 可以很容易地在样式表的不同地方共享样式.如果你发现自己在不停地重复一段样式, 那就应该把这段样式构造成优良的混合器, 尤其是这段样式本身就是一个逻辑单元, 比如说是一组放在一起有意义的属性.

// 【混合器中的CSS规则】
// 混合器中不仅可以包含属性, 也可以包含css规则, 包含选择器和选择器中的属性.
@mixin no-bullets {
    list-style: none;
    li {
        list-style-image: none;
        list-style-type: none;
        margin-left: 0px;
    }
}

// 当一个包含css规则的混合器通过@include包含在一个父规则中时, 在混合器中的规则最终会生成父规则中的嵌套规则.举个例子, 看看下边的sass代码, 这个例子中使用了no-bullets这个混合器：
ul.plain {
    color: #444;
    @include no-bullets;
}

// 混合器中的规则甚至可以使用sass的父选择器标识符&.使用起来跟不用混合器时一样, sass解开嵌套规则时, 用父规则中的选择器替代&.
// 如果一个混合器只包含css规则, 不包含属性, 那么这个混合器就可以在文档的顶部调用, 写在所有的css规则之外.如果你只是为自己写一些混合器, 这并没有什么大的用途, 但是当你使用一个类似于Compass的库时, 你会发现, 这是提供样式的好方法, 原因在于你可以选择是否使用这些样式.

// 【给混合器传参】
// 混合器并不一定总得生成相同的样式.可以通过在@include混合器时给混合器传参, 来定制混合器生成的精确样式.当@include混合器时, 参数其实就是可以赋值给css属性值的变量.如果你写过JavaScript, 这种方式跟JavaScript的function很像：
@mixin link-colors($normal, $hover, $visited) {
    color: $normal;
    &:hover { color: $hover; }
    &:visited { color: $visited; }
}

a {
    @include link-colors(blue, red, green);
}

// 【默认参数值】
@mixin link-colors(
    $normal,
    $hover: $normal,
    $visited: $normal
) {
    color: $normal;
    &:hover { color: $hover; }
    &:visited { color: $visited; }
}

ul.plan {
    @include link-colors(red); // @include link-colors(red) $hover和$visited也会被自动赋值为red
}

// 【使用选择器继承来精简CSS】
// 使用sass的时候, 最后一个减少重复的主要特性就是选择器继承.基于Nicole Sullivan面向对象的css的理念, 选择器继承是说一个选择器可以继承为另一个选择器定义的所有样式.这个通过@extend语法实现.

// 通过选择器继承继承样式
.error {
    border: 1px red;
    background-color: #fdd;
}
.seriousError {
    @extend .error;
    border-width: 3px;
}

// .seriousError不仅会继承.error自身的所有样式, 任何跟.error有关的组合选择器样式也会被.seriousError以组合选择器的形式继承, 如下代码:
// .seriousError从.error继承样式
.error a {  // 应用到.seriousError a
    color: red;
    font-weight: 100;
}
h1.error { // 应用到hl.seriousError
    font-size: 1.2rem;
}

// 【何时使用继承】
//  5-1节介绍了混合器主要用于展示性样式的重用, 而类名用于语义化样式的重用.因为继承是基于类的（有时是基于其他类型的选择器）, 所以继承应该是建立在语义化的关系上.当一个元素拥有的类（比如说.seriousError）表明它属于另一个类（比如说.error）, 这时使用继承再合适不过了.
//  这有点抽象, 所以我们从几个方面来阐释一下.想象一下你正在编写一个页面, 给html元素添加类名, 你发现你的某个类（比如说.seriousError）另一个类（比如说.error）的细化.你会怎么做？
//      1) 你可以为这两个类分别写相同的样式, 但是如果有大量的重复怎么办？使用sass时, 我们提倡的就是不要做重复的工作.
//      2) 你可以使用一个选择器组（比如说.error.seriousError）给这两个选择器写相同的样式.如果.error的所有样式都在同一个地方, 这种做法很好, 但是如果是分散在样式表的不同地方呢？再这样做就困难多了.
//      3) 你可以使用一个混合器为这两个类提供相同的样式, 但当.error的样式修饰遍布样式表中各处时, 这种做法面临着跟使用选择器组一样的问题.这两个类也不是恰好有相同的 样式.你应该更清晰地表达这种关系.
//  综上所述你应该使用@extend.让.seriousError从.error继承样式, 使两者之间的关系非常清晰.更重要的是无论你在样式表的哪里使用.error.seriousError都会继承其中的样式.

// 【继承的高级用法】
//  任何css规则都可以继承其他规则, 几乎任何css规则也都可以被继承.大多数情况你可能只想对类使用继承, 但是有些场合你可能想做得更多.最常用的一种高级用法是继承一个html元素的样式.尽管默认的浏览器样式不会被继承, 因为它们不属于样式表中的样式, 但是你对html元素添加的所有样式都会被继承.
//  接下来的这段代码定义了一个名为disabled的类, 样式修饰使它看上去像一个灰掉的超链接.通过继承a这一超链接元素来实现：
.disabled {
    color: gray;
    @extend a;
}

//  假如一条样式规则继承了一个复杂的选择器, 那么它只会继承这个复杂选择器命中的元素所应用的样式.举例来说,  如果.seriousError @extend .important.error,  那么.important.error 和h1.important.error 的样式都会被.seriousError继承,  但是.important或者.error下的样式则不会被继承.这种情况下你很可能希望.seriousError能够分别继承.important或者.error下的样式.
//  如果一个选择器序列（#main .seriousError）@extend另一个选择器（.error）, 那么只有完全命中#main .seriousError这个选择器的元素才会继承.error的样式, 就像单个类名继承那样.拥有class="seriousError"的.main元素之外的元素不会受到影响.
//  像#main .error这种选择器序列是不能被继承的.这是因为从#main .error中继承的样式一般情况下会跟直接从.error中继承的样式基本一致, 细微的区别往往使人迷惑.
//  现在你已经了解了通过继承能够做些什么事情, 接下来我们将学习继承的工作细节, 在生成对应css的时候, sass具体干了些什么事情.

//  【继承的工作细节】
//  跟变量和混合器不同, 继承不是仅仅用css样式替换@extend处的代码那么简单.为了不让你对生成的css感觉奇怪, 对这背后的工作原理有一定了解是非常重要的.
//  @extend背后最基本的想法是, 如果.seriousError @extend .error,  那么样式表中的任何一处.error都用.error.seriousError这一选择器组进行替换.这就意味着相关样式会如预期那样应用到.error和.seriousError.当.error出现在复杂的选择器中, 比如说h1.error.error a或者#main .sidebar input.error[type="text"], 那情况就变得复杂多了, 但是不用担心, sass已经为你考虑到了这些.
//  关于@extend有两个要点你应该知道.
//      1) 跟混合器相比, 继承生成的css代码相对更少.因为继承仅仅是重复选择器, 而不会重复属性, 所以使用继承往往比混合器生成的css体积更小.如果你非常关心你站点的速度, 请牢记这一点.
//      2) 继承遵从css层叠的规则.当两个不同的css规则应用到同一个html元素上时, 并且这两个不同的css规则对同一属性的修饰存在不同的值, css层叠规则会决定应用哪个样式.相当直观：通常权重更高的选择器胜出, 如果权重相同, 定义在后边的规则胜出.
// 混合器本身不会引起css层叠的问题, 因为混合器把样式直接放到了css规则中, 而继承存在样式层叠的问题.被继承的样式会保持原有定义位置和选择器权重不变.通常来说这并不会引起什么问题, 但是知道这点总没有坏处.

// 【使用继承的最佳实践】
.foo .bar { @extend .baz; }
.bip .baz { font-size: 12px; }
