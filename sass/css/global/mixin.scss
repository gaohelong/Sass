//【混合器】
// 混合指令（Mixin）用于定义可重复使用的样式，避免了使用无语意的 class，比如 .float-left。混合指令可以包含所有的 CSS 规则，绝大部分 Sass 规则，甚至通过参数功能引入变量，输出多样化的样式。
// 1、定义混合指令 @mixin (Defining a Mixin: @mixin)混合指令的用法是在 @mixin 后添加名称与样式，比如名为 large-text 的混合通过下面的代码定义：
@mixin large-text {
    font: {
        family: Arial;
        size: 20px;
        weight: bold;
    }
    color: #ff0000;
}

// 混合也需要包含选择器和属性，甚至可以用 & 引用父选择器：
@mixin clearfix {
    display: inline-block;
    &:after {
        content: ".";
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
    }
    * html & { height: 1px }
}

// 2. 引用混合样式 @include (Including a Mixin: @include)使用 @include 指令引用混合样式，格式是在其后添加混合名称，以及需要的参数（可选）：
.page-title {
    @include large-text;
    padding: 4px;
    margin-top: 10px;
}

// 也可以在最外层引用混合样式，不会直接定义属性，也不可以使用父选择器。
@mixin silly-links {
    a {
        color: blue;
        background-color: red;
    }
}
@include silly-links;

// 混合样式中也可以包含其他混合样式(这样混合使用时不能在最外层引用，比如上面的实例)，比如:
@mixin compound {
    @include highlighted-background;
    @include header-text;
}
@mixin highlighted-background {
    background-color: #fc0;
}
@mixin header-text {
    font-size: 20px;
}

p {
    @include compound;
}

.p1 {
    @include clearfix;
}

// 3. 参数 (Arguments)参数用于给混合指令中的样式设定变量，并且赋值使用。在定义混合指令的时候，按照变量的格式，通过逗号分隔，将参数写进圆括号里。引用指令时，按照参数的顺序，再将所赋的值对应写进括号：
@mixin sexy-border($color, $width) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}
.p2 {
    @include sexy-border(blue, 10px);
}

@mixin radius($width) {
    border-radius: $width;
    -ms-border-radius: $width;
    -moz-border-radius: $width;
    -webkit-border-radius: $width;
}
.p3 {
    width: 100px;
    @include radius(5px);
}

// 混合指令也可以使用给变量赋值的方法给参数设定默认值，然后，当这个指令被引用的时候，如果没有给参数赋值，则自动使用默认值：
@mixin sexy-border($color, $width: 1px) {
    border: {
        color: $color;
        width: $width;
        style: dashed;
    }
}
.p4 {
    @include sexy-border(blue);
}
.p5 {
    @include sexy-border(blue, 10px);
}

// 3.1. 关键词参数 (Keyword Arguments)混合指令也可以使用关键词参数，上面的例子也可以写成：
// 虽然不够简明，但是阅读起来会更方便。关键词参数给函数提供了更灵活的接口，以及容易调用的参数。关键词参数可以打乱顺序使用，如果使用默认值也可以省缺，另外，参数名被视为变量名，下划线、短横线可以互换使用。
.p6 {
    @include sexy-border($color: blue);
}
.p7 {
    @include sexy-border($color: blue, $width: 20px);
}

// 3.2. 参数变量 (Variable Arguments)有时，不能确定混合指令需要使用多少个参数，比如一个关于 box-shadow 的混合指令不能确定有多少个 'shadow' 会被用到。这时，可以使用参数变量 … 声明（写在参数的最后方）告诉 Sass 将这些参数视为值列表处理：
@mixin box-shadow($shadows...) {
    -moz-box-shadow: $shadows;
    -webkit-box-shadow: $shadows;
    box-shadow: $shadows;
}

.shadows {
    @include box-shadow(0px 4px 5px #666, 2px 6px 10px #999);
}

// 参数变量也可以用在引用混合指令的时候 (@include)，与平时用法一样，将一串值列表中的值逐条作为参数引用：
@mixin colors($text, $background, $border) {
    color: $text;
    background-color: $background;
    border-color: $border;
}

$values: #ff0000, #00ff00, #0000ff;
.primary {
    @include colors($values...);
}

// 4. 向混合样式中导入内容 (Passing Content Blocks to a Mixin)在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 @content 标志的地方：
@mixin apply-to-ie6-only {
    * html {
        @content;
    }
}

@include apply-to-ie6-only {
    #logo {
        background-color: #fff;
    }
}

// 4实例.
$color: white;
@mixin colors($color: blue) {
    background-color: $color;
    @content;
    border-color: $color;
}

.colors {
    @include colors {
        color: $color;
    }
}

.colors1 {
    @include colors(red) {
        font-size: 14px;
    }
}

#sidebar {
    $sidebar-width: 300px;
    width: $sidebar-width;
    @include colors {
        width: $sidebar-width / 3;
    }
}
